//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Camera/CameraMovementInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @CameraMovementInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @CameraMovementInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""CameraMovementInput"",
    ""maps"": [
        {
            ""name"": ""KeyboardMove"",
            ""id"": ""5d979b0f-2791-4a71-9c1d-b0fb81065c53"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""dce118f5-5592-45dc-8b37-ac35feb3dc1a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Boost"",
                    ""type"": ""Button"",
                    ""id"": ""1ad4c1db-f881-4312-b2df-752875573eee"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""1264696a-186d-4e21-8e40-cf4d1b5f62e9"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ca5c27c1-9624-4c29-a5c7-c033e3d4c2ce"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e1cbfd78-aa8c-45a8-bc22-17852144fb8e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""dcbc9583-b349-4e55-aa71-454381871e7e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""384d544d-045c-49b7-9f69-4d41fd642a1c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a7ad9ab3-b61e-4ec5-8106-db08e285be86"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Boost"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""MouseMove"",
            ""id"": ""206d65c2-c838-4f1c-b960-7e0a0f2d54e6"",
            ""actions"": [
                {
                    ""name"": ""Delta"",
                    ""type"": ""Value"",
                    ""id"": ""685f9651-d1f6-4a0e-a2c8-1f5c19f70432"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""InvertVector2,ScaleVector2(x=0.5,y=0.5)"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""55383825-7560-4322-b9cc-8023be5520cb"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Delta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""InputMapSwitch"",
            ""id"": ""2ce00855-45fc-4225-aa13-d6753e354894"",
            ""actions"": [
                {
                    ""name"": ""ChangeMoveActionMap"",
                    ""type"": ""Button"",
                    ""id"": ""32423ef6-4e07-4129-b638-3a896cdfb315"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ChangeRotateActionMap"",
                    ""type"": ""Button"",
                    ""id"": ""4cc745ac-9a06-44b6-9f79-a8d69f592e5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""009d29f4-6a99-4c09-aaa6-4aa42e718f3a"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeMoveActionMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""894c4e56-645d-48ae-be10-cce044d97e70"",
                    ""path"": ""<Mouse>/middleButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeRotateActionMap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""KeyboardRotate"",
            ""id"": ""212f1316-f054-4a61-9e26-d05def788c87"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""a520ad97-6ae1-41d6-83a0-66ad5c2a251c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""804d519d-06db-4ea0-b931-ec2738e77690"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""3caf32c2-0591-4c35-86f4-a1ed82cbd444"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""2338d765-b3cb-4e96-aafb-6482cd4cd5c8"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""MouseRotate"",
            ""id"": ""361c5e3d-913c-4350-844e-b08bc1ab5d11"",
            ""actions"": [
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Value"",
                    ""id"": ""eb85a1c7-2375-450b-92fb-d63b80ee8df4"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c157f105-c314-440d-8a24-1eaca42d0374"",
                    ""path"": ""<Mouse>/delta/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aa3c16e1-f9a3-4b30-8497-23e7b092f804"",
                    ""path"": ""<Mouse>/delta/left"",
                    ""interactions"": """",
                    ""processors"": ""Invert"",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // KeyboardMove
        m_KeyboardMove = asset.FindActionMap("KeyboardMove", throwIfNotFound: true);
        m_KeyboardMove_Move = m_KeyboardMove.FindAction("Move", throwIfNotFound: true);
        m_KeyboardMove_Boost = m_KeyboardMove.FindAction("Boost", throwIfNotFound: true);
        // MouseMove
        m_MouseMove = asset.FindActionMap("MouseMove", throwIfNotFound: true);
        m_MouseMove_Delta = m_MouseMove.FindAction("Delta", throwIfNotFound: true);
        // InputMapSwitch
        m_InputMapSwitch = asset.FindActionMap("InputMapSwitch", throwIfNotFound: true);
        m_InputMapSwitch_ChangeMoveActionMap = m_InputMapSwitch.FindAction("ChangeMoveActionMap", throwIfNotFound: true);
        m_InputMapSwitch_ChangeRotateActionMap = m_InputMapSwitch.FindAction("ChangeRotateActionMap", throwIfNotFound: true);
        // KeyboardRotate
        m_KeyboardRotate = asset.FindActionMap("KeyboardRotate", throwIfNotFound: true);
        m_KeyboardRotate_Rotate = m_KeyboardRotate.FindAction("Rotate", throwIfNotFound: true);
        // MouseRotate
        m_MouseRotate = asset.FindActionMap("MouseRotate", throwIfNotFound: true);
        m_MouseRotate_Rotate = m_MouseRotate.FindAction("Rotate", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyboardMove
    private readonly InputActionMap m_KeyboardMove;
    private IKeyboardMoveActions m_KeyboardMoveActionsCallbackInterface;
    private readonly InputAction m_KeyboardMove_Move;
    private readonly InputAction m_KeyboardMove_Boost;
    public struct KeyboardMoveActions
    {
        private @CameraMovementInput m_Wrapper;
        public KeyboardMoveActions(@CameraMovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_KeyboardMove_Move;
        public InputAction @Boost => m_Wrapper.m_KeyboardMove_Boost;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardMoveActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardMoveActions instance)
        {
            if (m_Wrapper.m_KeyboardMoveActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_KeyboardMoveActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_KeyboardMoveActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_KeyboardMoveActionsCallbackInterface.OnMove;
                @Boost.started -= m_Wrapper.m_KeyboardMoveActionsCallbackInterface.OnBoost;
                @Boost.performed -= m_Wrapper.m_KeyboardMoveActionsCallbackInterface.OnBoost;
                @Boost.canceled -= m_Wrapper.m_KeyboardMoveActionsCallbackInterface.OnBoost;
            }
            m_Wrapper.m_KeyboardMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Boost.started += instance.OnBoost;
                @Boost.performed += instance.OnBoost;
                @Boost.canceled += instance.OnBoost;
            }
        }
    }
    public KeyboardMoveActions @KeyboardMove => new KeyboardMoveActions(this);

    // MouseMove
    private readonly InputActionMap m_MouseMove;
    private IMouseMoveActions m_MouseMoveActionsCallbackInterface;
    private readonly InputAction m_MouseMove_Delta;
    public struct MouseMoveActions
    {
        private @CameraMovementInput m_Wrapper;
        public MouseMoveActions(@CameraMovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Delta => m_Wrapper.m_MouseMove_Delta;
        public InputActionMap Get() { return m_Wrapper.m_MouseMove; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseMoveActions set) { return set.Get(); }
        public void SetCallbacks(IMouseMoveActions instance)
        {
            if (m_Wrapper.m_MouseMoveActionsCallbackInterface != null)
            {
                @Delta.started -= m_Wrapper.m_MouseMoveActionsCallbackInterface.OnDelta;
                @Delta.performed -= m_Wrapper.m_MouseMoveActionsCallbackInterface.OnDelta;
                @Delta.canceled -= m_Wrapper.m_MouseMoveActionsCallbackInterface.OnDelta;
            }
            m_Wrapper.m_MouseMoveActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Delta.started += instance.OnDelta;
                @Delta.performed += instance.OnDelta;
                @Delta.canceled += instance.OnDelta;
            }
        }
    }
    public MouseMoveActions @MouseMove => new MouseMoveActions(this);

    // InputMapSwitch
    private readonly InputActionMap m_InputMapSwitch;
    private IInputMapSwitchActions m_InputMapSwitchActionsCallbackInterface;
    private readonly InputAction m_InputMapSwitch_ChangeMoveActionMap;
    private readonly InputAction m_InputMapSwitch_ChangeRotateActionMap;
    public struct InputMapSwitchActions
    {
        private @CameraMovementInput m_Wrapper;
        public InputMapSwitchActions(@CameraMovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @ChangeMoveActionMap => m_Wrapper.m_InputMapSwitch_ChangeMoveActionMap;
        public InputAction @ChangeRotateActionMap => m_Wrapper.m_InputMapSwitch_ChangeRotateActionMap;
        public InputActionMap Get() { return m_Wrapper.m_InputMapSwitch; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InputMapSwitchActions set) { return set.Get(); }
        public void SetCallbacks(IInputMapSwitchActions instance)
        {
            if (m_Wrapper.m_InputMapSwitchActionsCallbackInterface != null)
            {
                @ChangeMoveActionMap.started -= m_Wrapper.m_InputMapSwitchActionsCallbackInterface.OnChangeMoveActionMap;
                @ChangeMoveActionMap.performed -= m_Wrapper.m_InputMapSwitchActionsCallbackInterface.OnChangeMoveActionMap;
                @ChangeMoveActionMap.canceled -= m_Wrapper.m_InputMapSwitchActionsCallbackInterface.OnChangeMoveActionMap;
                @ChangeRotateActionMap.started -= m_Wrapper.m_InputMapSwitchActionsCallbackInterface.OnChangeRotateActionMap;
                @ChangeRotateActionMap.performed -= m_Wrapper.m_InputMapSwitchActionsCallbackInterface.OnChangeRotateActionMap;
                @ChangeRotateActionMap.canceled -= m_Wrapper.m_InputMapSwitchActionsCallbackInterface.OnChangeRotateActionMap;
            }
            m_Wrapper.m_InputMapSwitchActionsCallbackInterface = instance;
            if (instance != null)
            {
                @ChangeMoveActionMap.started += instance.OnChangeMoveActionMap;
                @ChangeMoveActionMap.performed += instance.OnChangeMoveActionMap;
                @ChangeMoveActionMap.canceled += instance.OnChangeMoveActionMap;
                @ChangeRotateActionMap.started += instance.OnChangeRotateActionMap;
                @ChangeRotateActionMap.performed += instance.OnChangeRotateActionMap;
                @ChangeRotateActionMap.canceled += instance.OnChangeRotateActionMap;
            }
        }
    }
    public InputMapSwitchActions @InputMapSwitch => new InputMapSwitchActions(this);

    // KeyboardRotate
    private readonly InputActionMap m_KeyboardRotate;
    private IKeyboardRotateActions m_KeyboardRotateActionsCallbackInterface;
    private readonly InputAction m_KeyboardRotate_Rotate;
    public struct KeyboardRotateActions
    {
        private @CameraMovementInput m_Wrapper;
        public KeyboardRotateActions(@CameraMovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_KeyboardRotate_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_KeyboardRotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyboardRotateActions set) { return set.Get(); }
        public void SetCallbacks(IKeyboardRotateActions instance)
        {
            if (m_Wrapper.m_KeyboardRotateActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_KeyboardRotateActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_KeyboardRotateActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_KeyboardRotateActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_KeyboardRotateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public KeyboardRotateActions @KeyboardRotate => new KeyboardRotateActions(this);

    // MouseRotate
    private readonly InputActionMap m_MouseRotate;
    private IMouseRotateActions m_MouseRotateActionsCallbackInterface;
    private readonly InputAction m_MouseRotate_Rotate;
    public struct MouseRotateActions
    {
        private @CameraMovementInput m_Wrapper;
        public MouseRotateActions(@CameraMovementInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Rotate => m_Wrapper.m_MouseRotate_Rotate;
        public InputActionMap Get() { return m_Wrapper.m_MouseRotate; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MouseRotateActions set) { return set.Get(); }
        public void SetCallbacks(IMouseRotateActions instance)
        {
            if (m_Wrapper.m_MouseRotateActionsCallbackInterface != null)
            {
                @Rotate.started -= m_Wrapper.m_MouseRotateActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_MouseRotateActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_MouseRotateActionsCallbackInterface.OnRotate;
            }
            m_Wrapper.m_MouseRotateActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
            }
        }
    }
    public MouseRotateActions @MouseRotate => new MouseRotateActions(this);
    public interface IKeyboardMoveActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnBoost(InputAction.CallbackContext context);
    }
    public interface IMouseMoveActions
    {
        void OnDelta(InputAction.CallbackContext context);
    }
    public interface IInputMapSwitchActions
    {
        void OnChangeMoveActionMap(InputAction.CallbackContext context);
        void OnChangeRotateActionMap(InputAction.CallbackContext context);
    }
    public interface IKeyboardRotateActions
    {
        void OnRotate(InputAction.CallbackContext context);
    }
    public interface IMouseRotateActions
    {
        void OnRotate(InputAction.CallbackContext context);
    }
}
